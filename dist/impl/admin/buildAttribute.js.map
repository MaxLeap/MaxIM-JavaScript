{"version":3,"sources":["../src/impl/admin/buildAttribute.ts"],"names":[],"mappings":";;IAGA;QAME,8BAAY,KAAY,EAAE,UAAsB,EAAE,SAAmB;YACnE,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;YAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,IAAI,KAAK,CAAC;QACtC,CAAC;QAEM,sCAAO,GAAd,UAAe,MAAc,EAAE,QAAwB;YACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,UAAQ,MAAM,gBAAa,EAAE,QAAQ,CAAC,CAAC;QAC7D,CAAC;QAEM,uCAAQ,GAAf,UAAgB,OAAe,EAAE,QAAwB;YACvD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,aAAW,OAAO,gBAAa,EAAE,QAAQ,CAAC,CAAC;QACjE,CAAC;QAEM,sCAAO,GAAd,UAAe,MAAc,EAAE,QAAwB;YACrD,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAU,MAAM,gBAAa,EAAE,QAAQ,CAAC,CAAC;QAC/D,CAAC;QAEO,sCAAO,GAAf,UAAgB,IAAY,EAAE,QAAwB;YACpD,IAAM,GAAG,GAAG,KAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,MAAM,GAAG,IAAM,CAAC;YACpD,IAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;YACjD,IAAM,GAAG,GAAG,EAAC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,OAAO,EAAC,CAAC;YAEpD,CAAC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,GAAG,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC;iBAC5E,IAAI,CAAC,UAAC,MAAM;gBACX,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBACvB,CAAC;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,UAAC,CAAC;gBACP,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;oBACb,QAAQ,CAAC,CAAC,CAAC,CAAC;gBACd,CAAC;YACH,CAAC,CAAC,CAAC;YACP,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC;QACpB,CAAC;QACH,2BAAC;IAAD,CA1CA,AA0CC,IAAA;IAGC,4BAAoB,wBAHrB;IAIC","file":"buildAttribute.js","sourcesContent":["import {Admin, AttributeBuilder} from \"../../api/admin\";\nimport {Attributes, Callback} from \"../../model/models\";\n\nclass AttributeBuilderImpl implements AttributeBuilder {\n\n  private admin: Admin;\n  private attributes: Attributes;\n  private overwrite: boolean;\n\n  constructor(admin: Admin, attributes: Attributes, overwrite?: boolean) {\n    this.admin = admin;\n    this.attributes = attributes;\n    this.overwrite = overwrite || false;\n  }\n\n  public forUser(userid: string, callback: Callback<void>): Admin {\n    return this.process(`/ctx/${userid}/attributes`, callback);\n  }\n\n  public forGroup(groupid: string, callback: Callback<void>): Admin {\n    return this.process(`/groups/${groupid}/attributes`, callback);\n  }\n\n  public forRoom(roomid: string, callback: Callback<void>): Admin {\n    return this.process(`/rooms/${roomid}/attributes`, callback);\n  }\n\n  private process(path: string, callback: Callback<void>): Admin {\n    const url = `${this.admin.options().server}${path}`;\n    const postData = JSON.stringify(this.attributes);\n    const cfg = {headers: this.admin.options().headers};\n\n    (this.overwrite ? axios.put(url, postData, cfg) : axios.post(url, postData, cfg))\n        .then((ignore) => {\n          if (callback) {\n            callback(null, null);\n          }\n        })\n        .catch((e) => {\n          if (callback) {\n            callback(e);\n          }\n        });\n    return this.admin;\n  }\n}\n\nexport {\n  AttributeBuilderImpl,\n};\n"]}