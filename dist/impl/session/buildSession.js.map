{"version":3,"sources":["../src/impl/session/buildSession.ts"],"names":[],"mappings":"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","file":"buildSession.js","sourcesContent":["import * as io from \"socket.io-client\";\nimport {Context} from \"../../api/context\";\nimport {Session, SessionBuilder} from \"../../api/session\";\nimport {convert2basic} from \"../../helper/utils\";\nimport {BasicMessageFrom, MessageFrom, Receiver, SystemMessageFrom, YourselfMessageFrom} from \"../../model/messages\";\nimport {APIOptions, Callback2, Handler1, Handler2, Handler3, LoginResult} from \"../../model/models\";\nimport {ContextImpl} from \"../context/context\";\nimport {SessionImpl} from \"./session\";\n\nclass SessionBuilderImpl implements SessionBuilder {\n\n  private friends: Array<Handler2<string, BasicMessageFrom>>;\n  private groups: Array<Handler3<string, string, BasicMessageFrom>>;\n  private rooms: Array<Handler3<string, string, BasicMessageFrom>>;\n  private passengers: Array<Handler2<string, BasicMessageFrom>>;\n  private strangers: Array<Handler2<string, BasicMessageFrom>>;\n  private friendonlines: Array<Handler1<string>>;\n  private friendofflines: Array<Handler1<string>>;\n  private strangeronlineds: Array<Handler1<string>>;\n  private strangerofflines: Array<Handler1<string>>;\n  private systems: Array<Handler1<SystemMessageFrom>>;\n  private yourselfs: Array<Handler1<YourselfMessageFrom>>;\n  private acks: Array<Handler2<number, number>>;\n\n  private apiOptions: APIOptions;\n  private authdata: any;\n\n  constructor(apiOptions: APIOptions, authdata: {}) {\n    this.apiOptions = apiOptions;\n    this.authdata = authdata;\n\n    this.friends = [];\n    this.groups = [];\n    this.rooms = [];\n    this.passengers = [];\n    this.strangers = [];\n\n    this.friendonlines = [];\n    this.friendofflines = [];\n    this.strangeronlineds = [];\n    this.strangerofflines = [];\n    this.systems = [];\n    this.yourselfs = [];\n    this.acks = [];\n  }\n\n  public setNotifyAll(enable: boolean): SessionBuilder {\n    this.authdata.notifyAll = enable;\n    return this;\n  }\n\n  public setInstallation(installation: string): SessionBuilder {\n    this.authdata.install = installation;\n    return this;\n  }\n\n  public onFriendMessage(handler: Handler2<string, BasicMessageFrom>): SessionBuilder {\n    this.friends.push(handler);\n    return this;\n  }\n\n  public onGroupMessage(handler: Handler3<string, string, MessageFrom>): SessionBuilder {\n    this.groups.push(handler);\n    return this;\n  }\n\n  public onRoomMessage(handler: Handler3<string, string, MessageFrom>): SessionBuilder {\n    this.rooms.push(handler);\n    return this;\n  }\n\n  public onPassengerMessage(handler: Handler2<string, MessageFrom>): SessionBuilder {\n    this.passengers.push(handler);\n    return this;\n  }\n\n  public onStrangerMessage(handler: Handler2<string, MessageFrom>): SessionBuilder {\n    this.strangers.push(handler);\n    return this;\n  }\n\n  public onFriendOnline(handler: Handler1<string>): SessionBuilder {\n    this.friendonlines.push(handler);\n    return this;\n  }\n\n  public onFriendOffline(handler: Handler1<string>): SessionBuilder {\n    this.friendofflines.push(handler);\n    return this;\n  }\n\n  public onStrangerOnline(handler: Handler1<string>): SessionBuilder {\n    this.strangeronlineds.push(handler);\n    return this;\n  }\n\n  public onStrangerOffline(handler: Handler1<string>): SessionBuilder {\n    this.strangerofflines.push(handler);\n    return this;\n  }\n\n  public onSystemMessage(handler: Handler1<SystemMessageFrom>): SessionBuilder {\n    this.systems.push(handler);\n    return this;\n  }\n\n  public onAck(handler: Handler2<number, number>): SessionBuilder {\n    this.acks.push(handler);\n    return this;\n  }\n\n  public onYourself(handler: Handler1<YourselfMessageFrom>): SessionBuilder {\n    this.yourselfs.push(handler);\n    return this;\n  }\n\n  public ok(callback: Callback2<Session, Context>) {\n    const url = `${this.apiOptions.server}/chat`;\n    const socket = io.connect(url, {\n      query: `auth=${JSON.stringify(this.authdata)}`,\n      transports: [\"websocket\"],\n    });\n    socket.once(\"login\", (result) => {\n      const foo = result as LoginResult;\n      if (foo.success) {\n        const session = new SessionImpl(socket, foo.id);\n        const ctx = new ContextImpl(this.apiOptions, result.id);\n        callback(null, session, ctx);\n      } else {\n        callback(new Error(`error: ${foo.error}`), null, null);\n      }\n    });\n\n    socket.on(\"message\", (income) => {\n      const msg = income as MessageFrom;\n      const basicmsg = convert2basic(msg);\n      switch (msg.from.type) {\n        case Receiver.ACTOR:\n          for (const it of this.friends) {\n            it(msg.from.id, basicmsg);\n          }\n          break;\n        case Receiver.GROUP:\n          for (const it of this.groups) {\n            it(msg.from.gid, msg.from.id, basicmsg);\n          }\n          break;\n        case Receiver.ROOM:\n          for (const it of this.rooms) {\n            it(msg.from.gid, msg.from.id, basicmsg);\n          }\n          break;\n        case Receiver.PASSENGER:\n          for (const it of this.passengers) {\n            it(msg.from.id, basicmsg);\n          }\n          break;\n        case Receiver.STRANGER:\n          for (const it of this.strangers) {\n            it(msg.from.id, basicmsg);\n          }\n          break;\n        default:\n          break;\n      }\n    });\n\n    socket.on(\"online\", (onlineid) => {\n      for (const it of this.friendonlines) {\n        it(onlineid as string);\n      }\n    });\n\n    socket.on(\"offline\", (offlineid) => {\n      for (const it of this.friendofflines) {\n        it(offlineid as string);\n      }\n    });\n\n    socket.on(\"online_x\", (onlineid) => {\n      for (const it of this.strangeronlineds) {\n        it(onlineid as string);\n      }\n    });\n\n    socket.on(\"offline_x\", (offlineid) => {\n      for (const it of this.strangerofflines) {\n        it(offlineid as string);\n      }\n    });\n\n    socket.on(\"sys\", (income) => {\n      const msg = income as BasicMessageFrom;\n      for (const it of this.systems) {\n        it(msg);\n      }\n    });\n\n    socket.on(\"yourself\", (income) => {\n      const msg = income as YourselfMessageFrom;\n      for (const it of this.yourselfs) {\n        it(msg);\n      }\n    });\n\n    socket.on(\"ack\", (income) => {\n      const msg = income as { ack: number, ts: number };\n      for (const it of this.acks) {\n        it(msg.ack, msg.ts);\n      }\n    });\n  }\n}\n\nexport {\n  SessionBuilderImpl,\n};\n"]}