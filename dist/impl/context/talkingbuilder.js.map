{"version":3,"sources":["../src/impl/context/talkingbuilder.ts"],"names":[],"mappings":"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","file":"talkingbuilder.js","sourcesContent":["import {Context, TalkingBuilder} from \"../../api/context\";\nimport {APIOptions, Callback, ChatRecord} from \"../../model/models\";\n\nclass TalkingBuilderImpl implements TalkingBuilder {\n\n  private ts: number;\n  private size: number;\n  private context: Context;\n  private you: string;\n  private apiOptions: APIOptions;\n\n  constructor(context: Context, ts: number, size: number, you: string, apiOptions: APIOptions) {\n    this.ts = ts;\n    this.size = size;\n    this.context = context;\n    this.you = you;\n    this.apiOptions = apiOptions;\n  }\n\n  public ofFriend(friendid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/ctx/${this.you}/friends/${friendid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofGroup(groupid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/groups/${groupid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofStranger(strangerid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/ctx/${this.you}/strangers/${strangerid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofPassenger(passengerid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/passengers/${passengerid}/chats/${this.you}`;\n    return this.listHistories(path, callback);\n  }\n\n  private listHistories(path: string, callback: Callback<ChatRecord[]>): Context {\n    let url = `${this.apiOptions.server}${path}`;\n    const q: string[] = [];\n    if (this.ts > 0) {\n      q.push(`ts=${this.ts}`);\n    }\n    if (this.size > 0) {\n      q.push(`limit=${this.size}`);\n    }\n\n    if (q.length > 0) {\n      url += \"?\" + q.join(\"&\");\n    }\n    axios.get(url, {headers: this.apiOptions.headers})\n        .then((response) => {\n          return response.data as ChatRecord[];\n        })\n        .then((records) => {\n          if (callback) {\n            callback(null, records);\n          }\n        })\n        .catch((e) => {\n          if (callback) {\n            callback(e);\n          }\n        });\n    return this.context;\n  }\n}\n\nexport {\n  TalkingBuilderImpl,\n};\n"]}