{"version":3,"sources":["../src/model/models.ts"],"names":[],"mappings":";;IA2DA;QAME,oBAAY,MAAc,EAAE,GAAW,EAAE,IAAY;YACnD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;YACrB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;YACf,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;YACjB,IAAI,CAAC,OAAO,GAAG;gBACb,YAAY,EAAE,GAAG;gBACjB,aAAa,EAAE,IAAI;gBACnB,cAAc,EAAE,iCAAiC;aAClD,CAAC;QACJ,CAAC;QACH,iBAAC;IAAD,CAhBA,AAgBC,IAAA;IAhBY,kBAAU,aAgBtB,CAAA","file":"models.js","sourcesContent":["import {Content} from \"./messages\";\n\nexport interface UserDetail {\n  sessions: number;\n  ts: number;\n  rooms?: string[];\n  groups?: string[];\n  installs?: string[];\n  friends?: string[];\n  attributes?: { [key: string]: any };\n}\n\nexport interface UserOutline {\n  id: string;\n  online: boolean;\n  ts: number;\n  attributes?: { [key: string]: any };\n}\n\nexport interface GroupInfo {\n  id: string;\n  owner: string;\n  members: string[];\n  ts: number;\n  attributes?: { [key: string]: any };\n}\n\nexport interface MyGroup extends GroupInfo {\n  recent?: ChatRecord;\n}\n\nexport interface RoomInfo {\n  id: string;\n  members: string[];\n  ts: number;\n  attributes?: { [key: string]: any };\n}\n\nexport interface ChatRecord {\n  speaker: string;\n  content: Content;\n  ts: number;\n  remark?: string;\n}\n\nexport interface Friend {\n  id: string;\n  online: boolean;\n  recent?: ChatRecord;\n}\n\nexport interface Passenger {\n  [key: string]: any;\n}\n\nexport interface Attributes {\n  [key: string]: any;\n}\n\nexport class APIOptions {\n  public server: string;\n  public app: string;\n  public sign: string;\n  public headers: { [key: string]: string };\n\n  constructor(server: string, app: string, sign: string) {\n    this.server = server;\n    this.app = app;\n    this.sign = sign;\n    this.headers = {\n      \"x-ml-appid\": app,\n      \"x-ml-apikey\": sign,\n      \"content-type\": \"application/json; charset=utf-8\",\n    };\n  }\n}\n\nexport type Handler1<T> = (t?: T) => void;\nexport type Handler2<T, U> = (t?: T, u?: U) => void;\nexport type Handler3<T, U, V> = (t?: T, u?: U, v?: V) => void;\nexport type Callback<T> = (err?: Error, t?: T) => void;\nexport type Callback2<T, U> = (err?: Error, t?: T, u?: U) => void;\n\nexport interface LoginResult {\n  success: boolean;\n  id?: string;\n  error?: number;\n}\n"]}