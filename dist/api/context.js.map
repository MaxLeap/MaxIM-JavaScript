{"version":3,"sources":["../src/api/context.ts"],"names":[],"mappings":";;IAyKE","file":"context.js","sourcesContent":["import {Attributes, Callback, ChatRecord, Friend, MyGroup, RoomInfo, UserOutline} from \"../model/models\";\nimport {CommonService} from \"./common\";\n\n/**\n * 聊天记录查询构建器.\n */\ninterface TalkingBuilder {\n  /**\n   * 设定为查询好友聊天记录.\n   * @param {string} friendid\n   * @param {Callback<ChatRecord[]>} callback\n   * @return {Context}\n   */\n  ofFriend(friendid: string, callback?: Callback<ChatRecord[]>): Context;\n\n  /**\n   * 设定为查询群组聊天记录.\n   * @param {string} groupid\n   * @param {Callback<ChatRecord[]>} callback\n   * @return {Context}\n   */\n  ofGroup(groupid: string, callback?: Callback<ChatRecord[]>): Context;\n\n  /**\n   * 设定为查询陌生人聊天记录.\n   * @param {string} strangerid\n   * @param {Callback<ChatRecord[]>} callback\n   * @return {Context}\n   */\n  ofStranger(strangerid: string, callback?: Callback<ChatRecord[]>): Context;\n\n  /**\n   * 设定为查询游客聊天记录.\n   * @param {string} passengerid\n   * @param {Callback<ChatRecord[]>} callback\n   * @return {Context}\n   */\n  ofPassenger(passengerid: string, callback?: Callback<ChatRecord[]>): Context;\n}\n\n/**\n * 上下文.\n */\ninterface Context extends CommonService {\n\n  /**\n   * 列出好友详情\n   * @param {Callback<Friend[]>} callback\n   * @return {Context}\n   */\n  listFriends(callback?: Callback<Friend[]>): Context;\n\n  /**\n   * 列出已加入的群组\n   * @param {Callback<MyGroup[]>} callback\n   * @return {Context}\n   */\n  listGroups(callback?: Callback<MyGroup[]>): Context;\n\n  /**\n   * 列出已加入的聊天室\n   * @param {Callback<RoomInfo[]>} callback\n   * @return {Context}\n   */\n  listRooms(callback?: Callback<RoomInfo[]>): Context;\n\n  /**\n   * 列出关联的陌生人列表, 分页查询\n   * @param {Callback<UserOutline[]>} callback\n   * @param {number} skip\n   * @param {number} limit\n   * @return {Context}\n   */\n  listStrangers(callback: Callback<UserOutline[]>, skip?: number, limit?: number): Context;\n\n  /**\n   * 查询聊天记录\n   * @param {number} endTimestamp\n   * @param {number} size\n   * @return {TalkingBuilder}\n   */\n  listTalkings(endTimestamp?: number, size?: number): TalkingBuilder;\n\n  /**\n   * 添加好友\n   * @param {string} userid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  joinFriend(userid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 加入某个群组\n   * @param {string} groupid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  joinGroup(groupid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 加入某个聊天室\n   * @param {string} roomid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  joinRoom(roomid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 解除某个好友\n   * @param {string} userid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  leaveFriend(userid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 离开某个群组\n   * @param {string} groupid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  leaveGroup(groupid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 离开某个聊天室\n   * @param {string} roomid\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  leaveRoom(roomid: string, callback?: Callback<void>): Context;\n\n  /**\n   * 设置当前上下文用户的属性\n   * @param {Attributes} attributes\n   * @param {boolean} overwrite\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  setMyAttributes(attributes: Attributes, overwrite?: boolean, callback?: Callback<void>): Context;\n\n  /**\n   * 设置当前上下文用户的单个属性\n   * @param {string} name\n   * @param value\n   * @param {Callback<void>} callback\n   * @return {Context}\n   */\n  setMyAttribute(name: string, value: any, callback?: Callback<void>): Context;\n\n  /**\n   * 获取当前上下文用户的属性列表\n   * @param {Callback<Attributes>} callback\n   * @return {Context}\n   */\n  getMyAttributes(callback?: Callback<Attributes>): Context;\n\n  /**\n   * 获取当前上下文用户的某个属性\n   * @param {string} attributeName\n   * @param {Callback} callback\n   * @return {Context}\n   */\n  getMyAttribute(attributeName: string, callback?: Callback<any>): Context;\n\n}\n\nexport {\n  Context,\n  TalkingBuilder,\n};\n"]}