{"version":3,"sources":["../src/service/login.ts"],"names":[],"mappings":";;IA8BA;QAKI,mBAAY,UAAsB;YAC9B,IAAI,CAAC,QAAQ,GAAG,UAAU,CAAC;YAC3B,IAAI,GAAG,GAAG,IAAI,IAAI,EAAE,CAAC,OAAO,EAAE,CAAC;YAC/B,IAAI,GAAG,GAAG,SAAG,CAAC,KAAG,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAM,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;YACzD,IAAI,CAAC,UAAU,GAAG;gBACd,GAAG,EAAE,IAAI,CAAC,QAAQ,CAAC,GAAG;gBACtB,IAAI,EAAE,GAAG;aACZ,CAAA;QACL,CAAC;QAEc,iBAAO,GAAtB,UAAuB,MAAU,EAAE,MAAU;YACzC,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;gBACnB,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;YAC1B,CAAC;QACL,CAAC;QAED,0BAAM,GAAN,UAAO,MAAc;YACjB,IAAI,QAAQ,GAAG;gBACX,MAAM,EAAE,MAAM;aACjB,CAAC;YACF,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,4BAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC;QAED,iCAAa,GAAb,UAAc,QAAgB,EAAE,QAAgB;YAC5C,IAAI,QAAQ,GAAG;gBACX,QAAQ,EAAE,QAAQ;gBAClB,QAAQ,EAAE,QAAQ;aACrB,CAAC;YACF,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,4BAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC;QAED,2BAAO,GAAP,UAAQ,KAAa,EAAE,MAAc;YACjC,IAAI,QAAQ,GAAG;gBACX,KAAK,EAAE,KAAK;gBACZ,QAAQ,EAAE,MAAM;aACnB,CAAC;YACF,SAAS,CAAC,OAAO,CAAC,QAAQ,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;YAC7C,MAAM,CAAC,IAAI,4BAAkB,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;QAC3D,CAAC;QACL,gBAAC;IAAD,CA9CA,AA8CC,IAAA;IA9CY,iBAAS,YA8CrB,CAAA","file":"login.js","sourcesContent":["import {SessionBuilder, SessionBuilderImpl} from \"./session\";\nimport {APIOptions} from \"../model/models\";\nimport {md5} from \"../helper/md5\";\n\n/**\n * 登录器\n */\nexport interface Login {\n    /**\n     * 极简登录\n     * @param userid 用户ID\n     */\n    simple(userid: string): SessionBuilder;\n    /**\n     * 通过MaxLeap用户账号登录\n     * @param username 用户名\n     * @param password 密码\n     */\n    byMaxleapUser(username: string, password: string): SessionBuilder;\n    /**\n     * 通过手机号登录\n     * @param phone 手机号码\n     * @param verify 验证码\n     */\n    byPhone(phone: string, verify: string): SessionBuilder;\n}\n\n/**\n * 登录器实现类\n */\nexport class LoginImpl implements Login {\n\n    private _options: APIOptions;\n    private _basicAuth: {};\n\n    constructor(apiOptions: APIOptions) {\n        this._options = apiOptions;\n        let foo = new Date().getTime();\n        let bar = md5(`${foo}${this._options.sign}`) + ',' + foo;\n        this._basicAuth = {\n            app: this._options.app,\n            sign: bar\n        }\n    }\n\n    private static _extend(target: {}, source: {}): void {\n        for (let k in source) {\n            target[k] = source[k];\n        }\n    }\n\n    simple(userid: string): SessionBuilder {\n        let authdata = {\n            client: userid\n        };\n        LoginImpl._extend(authdata, this._basicAuth);\n        return new SessionBuilderImpl(this._options, authdata);\n    }\n\n    byMaxleapUser(username: string, password: string): SessionBuilder {\n        let authdata = {\n            username: username,\n            password: password\n        };\n        LoginImpl._extend(authdata, this._basicAuth);\n        return new SessionBuilderImpl(this._options, authdata);\n    }\n\n    byPhone(phone: string, verify: string): SessionBuilder {\n        let authdata = {\n            phone: phone,\n            password: verify\n        };\n        LoginImpl._extend(authdata, this._basicAuth);\n        return new SessionBuilderImpl(this._options, authdata);\n    }\n}"]}