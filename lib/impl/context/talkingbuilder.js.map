{"version":3,"sources":["../src/impl/context/talkingbuilder.ts"],"names":[],"mappings":"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","file":"talkingbuilder.js","sourcesContent":["import {Context, TalkingBuilder} from \"../../api/context\";\nimport {APIOptions, Callback, ChatRecord} from \"../../model/models\";\n\nclass TalkingBuilderImpl implements TalkingBuilder {\n\n  private ts: number;\n  private size: number;\n  private context: Context;\n  private you: string;\n  private apiOptions: APIOptions;\n\n  constructor(context: Context, ts: number, size: number, you: string, apiOptions: APIOptions) {\n    this.ts = ts;\n    this.size = size;\n    this.context = context;\n    this.you = you;\n    this.apiOptions = apiOptions;\n  }\n\n  public ofFriend(friendid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/ctx/${this.you}/friends/${friendid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofGroup(groupid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/groups/${groupid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofStranger(strangerid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/ctx/${this.you}/strangers/${strangerid}/chats`;\n    return this.listHistories(path, callback);\n  }\n\n  public ofPassenger(passengerid: string, callback?: Callback<ChatRecord[]>): Context {\n    if (!callback) {\n      return this.context;\n    }\n    const path = `/passengers/${passengerid}/chats/${this.you}`;\n    return this.listHistories(path, callback);\n  }\n\n  private listHistories(path: string, callback: Callback<ChatRecord[]>): Context {\n    let url = `${this.apiOptions.server}${path}`;\n    const q: string[] = [];\n    if (this.ts > 0) {\n      q.push(`ts=${this.ts}`);\n    }\n    if (this.size > 0) {\n      q.push(`limit=${this.size}`);\n    }\n\n    if (q.length > 0) {\n      url += \"?\" + q.join(\"&\");\n    }\n    axios.get(url, {headers: this.apiOptions.headers})\n        .then((response) => {\n          return response.data as ChatRecord[];\n        })\n        .then((records) => {\n          if (callback) {\n            callback(null, records);\n          }\n        })\n        .catch((e) => {\n          if (callback) {\n            callback(e);\n          }\n        });\n    return this.context;\n  }\n}\n\nexport {\n  TalkingBuilderImpl,\n};\n"]}